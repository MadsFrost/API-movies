{"version":3,"sources":["assets/logo.png","components/MovieList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","String","prototype","capitalize","this","charAt","toUpperCase","slice","MoviesList","state","moviesList","searchTerm","search","event","preventDefault","axios","get","then","res","data","Search","map","movie","imdbID","setState","handleChange","target","value","onSubmit","placeholder","onChange","id","onKeyPress","key","type","icon","faSearch","size","className","length","movieID","React","Component","MovieCard","movieData","props","Title","Released","Genre","Plot","Poster","imdbRating","Metascore","imdbVotes","Type","style","backgroundImage","borderRadius","substr","split","g","src","width","height","isNaN","class","parseFloat","toFixed","marginLeft","App","Logo","marginTop","rel","href","marginRight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07bc0c83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.10403125.png\";","import React from 'react';\r\nimport axios from 'axios';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\r\nimport { SSL_OP_SINGLE_DH_USE } from 'constants';\r\nimport { whileStatement } from '@babel/types';\r\n\r\nString.prototype.capitalize = function() {\r\n    return this.charAt(0).toUpperCase() + this.slice(1);\r\n}\r\n\r\nclass MoviesList extends React.Component {\r\n    state = {\r\n        moviesList: ['tt0816692'],\r\n        searchTerm: ''\r\n    };\r\n\r\n    search = event => {\r\n        event.preventDefault();\r\n        axios\r\n            .get(\r\n                `https://www.omdbapi.com/?apikey=756abb2f&s=${\r\n                    this.state.searchTerm\r\n                }&plot=full`\r\n            )\r\n            .then(res => res.data)\r\n            .then(res => {\r\n                if (!res.Search) {\r\n                    this.setState({ moviesList: [] });\r\n                    return;\r\n                }\r\n\r\n                const moviesList = res.Search.map(movie => movie.imdbID);\r\n               \r\n                this.setState({\r\n                    moviesList\r\n                });\r\n            });\r\n    };\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            searchTerm: event.target.value\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { moviesList } = this.state;\r\n\r\n        \r\n        return (\r\n            <div>\r\n                <form onSubmit={this.search}>\r\n                    <input\r\n                        placeholder=\"Søk på en film..\"\r\n                        onChange={this.handleChange} id=\"inputField\" onKeyPress={event => {\r\n                            if (event.key === 'Enter') {\r\n                              this.search(event)\r\n                            }\r\n                          }}\r\n                    />\r\n                    <button type=\"submit\">\r\n                        <FontAwesomeIcon icon={faSearch} size=\"2x\"/>\r\n                    </button>\r\n                </form>\r\n                <div className=\"flexCards\">\r\n                {moviesList.length > 0 ? (\r\n                    moviesList.map(movie => (\r\n                        <MovieCard movieID={movie} key={movie} />\r\n                    ))\r\n                ) : (\r\n                    <p>\r\n                        Couldn't find what you were looking for. Try writing complete words or have more letters in your answer.\r\n                    </p>\r\n                )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass MovieCard extends React.Component {\r\n    state = {\r\n        movieData: {}\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(\r\n                `https://www.omdbapi.com/?apikey=756abb2f&i=${\r\n                    this.props.movieID\r\n                }&plot=full`\r\n            )\r\n            .then(res => res.data)\r\n            .then(res => {\r\n                this.setState({ movieData: res });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            Title,\r\n            Released,\r\n            Genre,\r\n            Plot,\r\n            Poster,\r\n            imdbRating,\r\n            Metascore,\r\n            imdbVotes,\r\n            Type\r\n        } = this.state.movieData;\r\n\r\n        if (!Poster || Poster === 'N/A') {\r\n            return null;\r\n        }\r\n\r\n        /*<span className=\"imdbRating\">{Ratings[1].Value}</span>);*/ \r\n\r\n        return (\r\n        <div>\r\n            <div className=\"flip-card\">\r\n                <div className=\"flip-card-inner\">\r\n                    <div className=\"flip-card-front\">\r\n                    <div\r\n                            className=\"bg-image\"\r\n                            style={{ backgroundImage: `url(${Poster})`, borderRadius: 22 }}\r\n                        />\r\n                    </div>\r\n                    <div className=\"flip-card-back movie-card-container\" style={{ backgroundImage: `url(${Poster})`}}>\r\n                        <div>\r\n                            <h1>{Title}</h1>\r\n                            <small>Released: {Released}, {(Type).toUpperCase()}</small>\r\n                        </div>\r\n                        <div className=\"plot-tit\"><h3>{(Type).capitalize()} Plot</h3></div>\r\n                        <p> {Plot && Plot.substr(0, 350)}</p>\r\n                        <div className=\"tags-container\">\r\n                            {Genre && Genre.split(', ').map(g => <span>{g}</span>)}\r\n                        </div>\r\n                        <div className=\"plot-tit\"><h3>Ratings (1-10)</h3></div>\r\n                        <h4 className=\"imdbBox\"><img className=\"imdbLogo\" src=\"https://i.pinimg.com/originals/cd/04/3a/cd043a4f42be9ff1cd0bced009304afa.png\" width=\"47\" height=\"25\"/> <span className=\"imdbRating\">{imdbRating}</span><span className=\"secondarytxt\">from {imdbVotes} reviews</span></h4>\r\n                            {isNaN(Metascore) ? (\r\n                                 <p>{null}</p>\r\n                                                                ) : (\r\n                                                                    <>\r\n                                <h4 className=\"imdbBox\"><img className=\"imdbLogo\" src=\"https://upload.wikimedia.org/wikipedia/commons/f/f2/Metacritic_M.png\" width=\"25\" height=\"25\"/><span className=\"imdbRating\"><p class=\"metaFixP\">{((parseFloat(Metascore)/10).toFixed(1))}</p><span className=\"secondarytxt\" className=\"MetaFix\">from critiques</span></span></h4>\r\n                                <h4 className=\"imdbBox\"><span className=\"metaRating\"><span className=\"imdbRating\">{((parseFloat(imdbRating)+parseFloat(Metascore/10))/2).toFixed(1)}</span></span><span style={{marginLeft: 5}}>Average</span></h4> \r\n                                </>\r\n                                )}\r\n                    </div>\r\n                    </div></div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MoviesList;\r\n","import React from 'react';\nimport './App.scss';\nimport MoviesList from './components/MovieList';\nimport Logo from './assets/logo.png';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"brandLogo\">\n        <img src={Logo}></img>\n      </div>\n      <header className=\"App-header\">\n        <MoviesList />\n      </header>\n      <footer style={{marginTop: 10}}>\n\t<p>\n\t\tLaget med ❤️ av\n\t\t<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/madsafrost/\" style={{marginLeft: 2, marginRight: 3}}>  Mads Klynderud</a>\n\t\t- Andre prosjekter på\n\t\t<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/MadsFrost\">\n\t\t\t <span style={{marginLeft: 4}}>Github </span> \n\t\t</a>\n     - Movie API:\n    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.omdbapi.com/\">\n\t\t\t <span style={{marginLeft: 4}}>OMDBapi</span> \n\t\t</a>\n\t</p>\n</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}